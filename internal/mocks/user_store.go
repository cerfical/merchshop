// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	model "github.com/cerfical/merchshop/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// UserStore is an autogenerated mock type for the UserStore type
type UserStore struct {
	mock.Mock
}

type UserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *UserStore) EXPECT() *UserStore_Expecter {
	return &UserStore_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: u
func (_m *UserStore) GetUser(u *model.UserCreds) (*model.User, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.UserCreds) (*model.User, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(*model.UserCreds) *model.User); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.UserCreds) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStore_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserStore_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - u *model.UserCreds
func (_e *UserStore_Expecter) GetUser(u interface{}) *UserStore_GetUser_Call {
	return &UserStore_GetUser_Call{Call: _e.mock.On("GetUser", u)}
}

func (_c *UserStore_GetUser_Call) Run(run func(u *model.UserCreds)) *UserStore_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.UserCreds))
	})
	return _c
}

func (_c *UserStore_GetUser_Call) Return(_a0 *model.User, _a1 error) *UserStore_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserStore_GetUser_Call) RunAndReturn(run func(*model.UserCreds) (*model.User, error)) *UserStore_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserStore creates a new instance of UserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStore {
	mock := &UserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
