// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	model "github.com/cerfical/merchshop/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// CoinService is an autogenerated mock type for the CoinService type
type CoinService struct {
	mock.Mock
}

type CoinService_Expecter struct {
	mock *mock.Mock
}

func (_m *CoinService) EXPECT() *CoinService_Expecter {
	return &CoinService_Expecter{mock: &_m.Mock}
}

// GetCoinBalance provides a mock function with given fields: _a0
func (_m *CoinService) GetCoinBalance(_a0 model.Username) (model.NumCoins, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinBalance")
	}

	var r0 model.NumCoins
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Username) (model.NumCoins, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.Username) model.NumCoins); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.NumCoins)
	}

	if rf, ok := ret.Get(1).(func(model.Username) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoinService_GetCoinBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoinBalance'
type CoinService_GetCoinBalance_Call struct {
	*mock.Call
}

// GetCoinBalance is a helper method to define mock.On call
//   - _a0 model.Username
func (_e *CoinService_Expecter) GetCoinBalance(_a0 interface{}) *CoinService_GetCoinBalance_Call {
	return &CoinService_GetCoinBalance_Call{Call: _e.mock.On("GetCoinBalance", _a0)}
}

func (_c *CoinService_GetCoinBalance_Call) Run(run func(_a0 model.Username)) *CoinService_GetCoinBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Username))
	})
	return _c
}

func (_c *CoinService_GetCoinBalance_Call) Return(_a0 model.NumCoins, _a1 error) *CoinService_GetCoinBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoinService_GetCoinBalance_Call) RunAndReturn(run func(model.Username) (model.NumCoins, error)) *CoinService_GetCoinBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoinService creates a new instance of CoinService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoinService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoinService {
	mock := &CoinService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
