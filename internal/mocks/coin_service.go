// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	model "github.com/cerfical/merchshop/internal/service/model"
	mock "github.com/stretchr/testify/mock"
)

// CoinService is an autogenerated mock type for the CoinService type
type CoinService struct {
	mock.Mock
}

type CoinService_Expecter struct {
	mock *mock.Mock
}

func (_m *CoinService) EXPECT() *CoinService_Expecter {
	return &CoinService_Expecter{mock: &_m.Mock}
}

// BuyItem provides a mock function with given fields: buyer, m
func (_m *CoinService) BuyItem(buyer model.Username, m *model.MerchItem) error {
	ret := _m.Called(buyer, m)

	if len(ret) == 0 {
		panic("no return value specified for BuyItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Username, *model.MerchItem) error); ok {
		r0 = rf(buyer, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoinService_BuyItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuyItem'
type CoinService_BuyItem_Call struct {
	*mock.Call
}

// BuyItem is a helper method to define mock.On call
//   - buyer model.Username
//   - m *model.MerchItem
func (_e *CoinService_Expecter) BuyItem(buyer interface{}, m interface{}) *CoinService_BuyItem_Call {
	return &CoinService_BuyItem_Call{Call: _e.mock.On("BuyItem", buyer, m)}
}

func (_c *CoinService_BuyItem_Call) Run(run func(buyer model.Username, m *model.MerchItem)) *CoinService_BuyItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Username), args[1].(*model.MerchItem))
	})
	return _c
}

func (_c *CoinService_BuyItem_Call) Return(_a0 error) *CoinService_BuyItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoinService_BuyItem_Call) RunAndReturn(run func(model.Username, *model.MerchItem) error) *CoinService_BuyItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: _a0
func (_m *CoinService) GetUser(_a0 model.Username) (*model.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Username) (*model.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.Username) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Username) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoinService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type CoinService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - _a0 model.Username
func (_e *CoinService_Expecter) GetUser(_a0 interface{}) *CoinService_GetUser_Call {
	return &CoinService_GetUser_Call{Call: _e.mock.On("GetUser", _a0)}
}

func (_c *CoinService_GetUser_Call) Run(run func(_a0 model.Username)) *CoinService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Username))
	})
	return _c
}

func (_c *CoinService_GetUser_Call) Return(_a0 *model.User, _a1 error) *CoinService_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoinService_GetUser_Call) RunAndReturn(run func(model.Username) (*model.User, error)) *CoinService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// SendCoins provides a mock function with given fields: from, to, amount
func (_m *CoinService) SendCoins(from model.Username, to model.Username, amount model.NumCoins) error {
	ret := _m.Called(from, to, amount)

	if len(ret) == 0 {
		panic("no return value specified for SendCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Username, model.Username, model.NumCoins) error); ok {
		r0 = rf(from, to, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoinService_SendCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoins'
type CoinService_SendCoins_Call struct {
	*mock.Call
}

// SendCoins is a helper method to define mock.On call
//   - from model.Username
//   - to model.Username
//   - amount model.NumCoins
func (_e *CoinService_Expecter) SendCoins(from interface{}, to interface{}, amount interface{}) *CoinService_SendCoins_Call {
	return &CoinService_SendCoins_Call{Call: _e.mock.On("SendCoins", from, to, amount)}
}

func (_c *CoinService_SendCoins_Call) Run(run func(from model.Username, to model.Username, amount model.NumCoins)) *CoinService_SendCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Username), args[1].(model.Username), args[2].(model.NumCoins))
	})
	return _c
}

func (_c *CoinService_SendCoins_Call) Return(_a0 error) *CoinService_SendCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoinService_SendCoins_Call) RunAndReturn(run func(model.Username, model.Username, model.NumCoins) error) *CoinService_SendCoins_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoinService creates a new instance of CoinService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoinService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoinService {
	mock := &CoinService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
