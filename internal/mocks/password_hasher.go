// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	model "github.com/cerfical/merchshop/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// PasswordHasher is an autogenerated mock type for the PasswordHasher type
type PasswordHasher struct {
	mock.Mock
}

type PasswordHasher_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordHasher) EXPECT() *PasswordHasher_Expecter {
	return &PasswordHasher_Expecter{mock: &_m.Mock}
}

// HashPassword provides a mock function with given fields: _a0
func (_m *PasswordHasher) HashPassword(_a0 model.Password) (model.PasswordHash, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 model.PasswordHash
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Password) (model.PasswordHash, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.Password) model.PasswordHash); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.PasswordHash)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Password) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordHasher_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type PasswordHasher_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - _a0 model.Password
func (_e *PasswordHasher_Expecter) HashPassword(_a0 interface{}) *PasswordHasher_HashPassword_Call {
	return &PasswordHasher_HashPassword_Call{Call: _e.mock.On("HashPassword", _a0)}
}

func (_c *PasswordHasher_HashPassword_Call) Run(run func(_a0 model.Password)) *PasswordHasher_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Password))
	})
	return _c
}

func (_c *PasswordHasher_HashPassword_Call) Return(_a0 model.PasswordHash, _a1 error) *PasswordHasher_HashPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordHasher_HashPassword_Call) RunAndReturn(run func(model.Password) (model.PasswordHash, error)) *PasswordHasher_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPassword provides a mock function with given fields: _a0, _a1
func (_m *PasswordHasher) VerifyPassword(_a0 model.Password, _a1 model.PasswordHash) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Password, model.PasswordHash) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordHasher_VerifyPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPassword'
type PasswordHasher_VerifyPassword_Call struct {
	*mock.Call
}

// VerifyPassword is a helper method to define mock.On call
//   - _a0 model.Password
//   - _a1 model.PasswordHash
func (_e *PasswordHasher_Expecter) VerifyPassword(_a0 interface{}, _a1 interface{}) *PasswordHasher_VerifyPassword_Call {
	return &PasswordHasher_VerifyPassword_Call{Call: _e.mock.On("VerifyPassword", _a0, _a1)}
}

func (_c *PasswordHasher_VerifyPassword_Call) Run(run func(_a0 model.Password, _a1 model.PasswordHash)) *PasswordHasher_VerifyPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Password), args[1].(model.PasswordHash))
	})
	return _c
}

func (_c *PasswordHasher_VerifyPassword_Call) Return(_a0 error) *PasswordHasher_VerifyPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordHasher_VerifyPassword_Call) RunAndReturn(run func(model.Password, model.PasswordHash) error) *PasswordHasher_VerifyPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewPasswordHasher creates a new instance of PasswordHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordHasher {
	mock := &PasswordHasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
